{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","formatAmount","number","amount","Math","abs","toLocaleString","undefined","maximumFractionDigits","_createClass","key","value","_jsx","className","children","_jsxs","this","props","creditsAmount","debitsAmount","accountBalance","Component","Home","Link","to","UserProfile","class","userName","memberSince","LogIn","handleChange","e","updatedUser","_objectSpread","state","user","target","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","Redirect","onSubmit","for","type","name","defaultValue","onChange","Credits","description","date","Date","toISOString","trim","parseFloat","isNaN","alert","addCredit","updateAccountBalance","sortCredits","handleSorting","sortBy","creditsView","credits","console","log","map","credit","slice","id","creditsSortBy","htmlFor","min","step","Debits","addDebit","sortDebits","debitsView","debits","debit","debitsSortBy","App","logInInfo","newUser","currentUser","getCreditsAmount","getDebitsAmount","round","getCredit","parseInt","push","find","forEach","sort","a","b","getDebit","_componentDidMount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","wrap","_context","prev","next","axios","get","sent","data","t0","response","status","t1","stop","_this3","Router","basename","Route","exact","path","render","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b1c08e7.chunk.js","sourcesContent":["/*==================================================\nsrc/components/AccountBalance.js\n\nThe AccountBalance component displays account balance. It is included in other page views.\n==================================================*/\nimport React, { Component } from 'react';\n\nclass AccountBalance extends Component {\n\n    formatAmount = (number) => {\n        let amount = Math.abs(number).toLocaleString(undefined, {maximumFractionDigits: 2});\n        if (number < 0) {\n            return \"-$\" + amount;\n        }\n        return \"$\" + amount;\n    }\n\n    // Display account balance\n    render() {\n        return (\n            <section className=\"account-balance\">\n                <ul className=\"flex-container\">\n                    <li>\n                        <p className=\"eyebrow\">Credits</p>\n                        <p className=\"heading-5 amount\">{this.formatAmount(this.props.creditsAmount())}</p>\n                    </li>\n                    <li>\n                        <p className=\"eyebrow\">Debits</p>\n                        <p className=\"heading-5 amount\">{this.formatAmount(this.props.debitsAmount())}</p>\n                    </li>\n                    <li>\n                        <p className=\"eyebrow\">Account Balance</p>\n                        <p className=\"heading-5 amount\">{this.formatAmount(this.props.accountBalance)}</p>\n                    </li>\n                </ul>\n            </section>\n        );\n    }\n}\n\nexport default AccountBalance;","/*==================================================\nsrc/components/Home.js\n\nThe Home component is used to demonstrate the use of Link.\n==================================================*/\nimport React, { Component } from 'react';\nimport AccountBalance from './AccountBalance';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"container\">\n                    <h1 className=\"page-title\">Bank of React</h1>\n\n                    <div className=\"modules grid\">\n                        <section className=\"page-preview module\">\n                            <h2 className=\"heading-4\">User Profile</h2>\n                            <p>View your profile.</p>\n                            <Link to=\"/userProfile\" className=\"btn primary\">View Profile</Link>\n                        </section>\n                        <section className=\"page-preview module\">\n                            <h2 className=\"heading-4\">Login</h2>\n                            <p>Login to your account.</p>\n                            <Link to=\"/login\" className=\"btn primary\">Login</Link>\n                        </section>\n                        <section className=\"page-preview dark module\">\n                            <h2 className=\"heading-4\">Credits</h2>\n                            <p>View and add credits.</p>\n                            <Link to=\"/credits\" className=\"btn primary light\">View Credits</Link>\n                        </section>\n                        <section className=\"page-preview dark module\">\n                            <h2 className=\"heading-4\">Debits</h2>\n                            <p>View and add debits.</p>\n                            <Link to=\"/debits\" className=\"btn primary light\">View Debits</Link>\n                        </section>\n                    </div>\n\n                    <AccountBalance\n                        accountBalance={this.props.accountBalance}\n                        debitsAmount={this.props.debitsAmount}\n                        creditsAmount={this.props.creditsAmount}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","/*==================================================\nsrc/components/UserProfile.js\n\nThe UserProfile component is used to demonstrate the use of Route and Link.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass UserProfile extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"container\">\n                    <h1 className=\"heading-2 page-title\">User Profile</h1>\n\n                    <div className=\"modules grid\">\n                        <section className=\"module user-profile\">\n                            <ul className=\"grid\">\n                                <li>\n                                    <h2 className=\"eyebrow\">Username</h2>\n                                    <p class=\"heading-5\">{this.props.userName}</p>\n                                </li>\n                                <li>\n                                    <h2 className=\"eyebrow\">Member Since</h2>\n                                    <p class=\"heading-5\">{this.props.memberSince}</p>\n                                </li>\n                            </ul>\n                        </section>\n                    </div>\n                    \n                    <Link to=\"/\" className=\"btn secondary\">Return to Home</Link>  \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserProfile;","/*==================================================\nsrc/components/Login.js\n\nThe LogIn component is used to demonstrate the use of Redirect.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nclass LogIn extends Component {\n    constructor(props) {  // Create and initialize state\n        super(props)\n        this.state = {\n            user: {\n                //userName: '',\n                userName: this.props.user.userName,  // Initialize userName using props input (currentUser in App.js)\n                password: ''\n            },\n            redirect: false  // Redirect property used to trigger Redirect\n        }\n    }\n\n    // When User Name input is changed, capture the new input value and update state\n    handleChange = (e) => {\n        const updatedUser = { ...this.state.user };  // Create an object for state\n        updatedUser.userName = e.target.value;  // Set object's userName to the new input value\n        this.setState({ user: updatedUser })  // Update state with object values\n    }\n\n    // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.mockLogIn(this.state.user)  // Update state in the top-level component (App.js)\n        this.setState({ redirect: true })  // Update state to trigger Redirect\n    }\n\n    render() {\n        // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n        if (this.state.redirect) {\n            return (<Redirect to=\"/userProfile\" />);\n        }\n\n        // Render the login form (and call \"handleSubmit\" method when \"Log In\" button is clicked to submit form)\n        return (\n            <div>\n                <div className=\"container\">\n                    <h1 className=\"heading-2 page-title\">Login</h1>\n\n                    <div className=\"modules grid\">\n                        <section className=\"module user-profile\">\n                            <form onSubmit={this.handleSubmit}>\n                                <div className=\"form-input-wrapper\">\n                                    <label for=\"userName\">User Name</label>\n                                    <input type=\"text\" name=\"userName\" defaultValue={this.props.user.userName} onChange={this.handleChange} />\n                                </div>\n                                <div className=\"form-input-wrapper\">\n                                    <label for=\"password\">Password</label>\n                                    <input type=\"password\" name=\"password\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn primary\">Log in</button>\n                            </form>\n                        </section>\n                    </div>\n\n                    <Link to=\"/\" className=\"btn secondary\">Return to Home</Link>  \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LogIn;","/*==================================================\nsrc/components/Credits.js\n\nThe Credits component contains information for Credits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AccountBalance from './AccountBalance';\n\nclass Credits extends Component {\n    constructor(props) {\n        super(props);\n\n        // Initialize the state\n        this.state = {\n            credits: this.props.credits,\n            sortBy: this.props.creditsSortBy\n        }\n    }\n\n    /**\n     * Handle the form submission.\n     * \n     * @param {Event} e \n     * @returns {void}\n     */\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        // Get the form data.\n        let description = e.target.description.value;\n        let amount = e.target.amount.value;\n        let date = new Date().toISOString();\n\n        // Trim the description and parse the amount as a float\n        description = description.trim();\n        amount = parseFloat(amount);\n\n        // Validation checks.\n        if (isNaN(amount)) {\n            alert(\"Please enter a valid amount.\");\n            return;\n        }\n\n        if (amount <= 0) {\n            if (amount === 0) {\n                alert(\"Please enter a non-zero amount.\");\n            } else {\n                alert(\"Please enter a positive number. A negative credit is a debit ;)\");\n            }\n            return;\n        }\n\n        if (description === \"\") {\n            alert(\"Please enter a description.\");\n            return;\n        }\n\n        // Use helper functions.\n        this.props.addCredit(amount, description, date);\n        this.props.updateAccountBalance();\n        this.props.sortCredits();\n\n        // Reset the form values.\n        e.target.description.value = \"\";\n        e.target.amount.value = \"\";\n    }\n\n    /**\n     * Handle sorting.\n     * \n     * @param {Event} e \n     */\n    handleSorting = (e) => {\n        e.preventDefault();\n        let sortBy = e.target.value;\n        this.props.sortCredits(sortBy);\n    }\n\n    /**\n     * Create the list of Debit items\n     * \n     * @returns \n     */\n    creditsView = () => {\n        const credits = this.state.credits;\n        console.log(credits)\n        return credits.map((credit) => {\n            let date = new Date(credit.date).toISOString().slice(0, 10);\n            return (\n                <li key={credit.id}>\n                    <dl>\n                        <dt className=\"eyebrow\">Description</dt>\n                        <dd>{credit.description}</dd>\n                        <dt className=\"eyebrow\">Amount</dt>\n                        <dd>${credit.amount.toLocaleString(undefined, {maximumFractionDigits: 2})}</dd>\n                        <dt className=\"eyebrow\">Date</dt>\n                        <dd>{date}</dd>\n                    </dl>\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container\">\n                    <h1 className=\"heading-2 page-title\">Credits</h1>\n\n                    <AccountBalance\n                        accountBalance={this.props.accountBalance}\n                        debitsAmount={this.props.debitsAmount}\n                        creditsAmount={this.props.creditsAmount}\n                    />\n\n                    <div className=\"modules grid\">\n                        <section className=\"add-item module\">\n                            <h2 className=\"heading-4\">Add Credit</h2>\n                            <form onSubmit={this.handleSubmit} className=\"grid\">\n                                <div className=\"form-input-wrapper\">\n                                    <label htmlFor=\"description\">Description</label>\n                                    <input type=\"text\" name=\"description\" />\n                                </div>\n                                <div className=\"form-input-wrapper\">\n                                    <label htmlFor=\"amount\">Amount</label>\n                                    <input type=\"number\" name=\"amount\" min=\"1\" step=\"0.01\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn primary\">Add Debit</button>\n                            </form>\n                        </section>\n                        \n                        <section className=\"view-items module grid\">\n                            <h2 className=\"heading-4\">View credits</h2>\n                            <form className=\"sorting flex-container\">\n                                <label htmlFor=\"sort\">Sort by</label>\n                                <select name=\"sort\" id=\"sort\" onChange={this.handleSorting} defaultValue={this.state.sortBy}>\n                                    <option value=\"date-desc\">Date (Oldest to Newest)</option>\n                                    <option value=\"date-asc\">Date (Newest to Oldest)</option>\n                                    <option value=\"amount-asc\">Amount (Lowest to Highest)</option>\n                                    <option value=\"amount-desc\">Amount (Highest to Lowest)</option>\n                                    <option value=\"ID\">ID</option>\n                                </select>\n                            </form>\n                            <ul>\n                                {this.creditsView()}\n                            </ul>\n                        </section>\n                    </div>\n\n                    <Link to=\"/\" className=\"btn secondary\">Return to Home</Link>  \n                </div>\n            </div>            \n        )\n    }\n}\n\nexport default Credits;","/*==================================================\nsrc/components/Debits.js\n\nThe Debits component contains information for Debits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AccountBalance from './AccountBalance';\n\n/*\nViewing the Debits Page:\n\nGIVEN I am on the Home Page\nWHEN I click on 'Debits' link/button\nTHEN I shall be redirected to the Debits Page\nAND I shall see a title of 'Debits' on the web page\nDisplaying List of Debits:\n\nGIVEN I am on the Debits page\nWHEN I view the Debits display area\nTHEN I shall see all my Debits displayed in a list, including the Debits retrieved from API endpoint\nAND each Debit shall display its description, amount, and date (yyyy-mm-dd)\nAND all amounts are rounded to 2 decimal places (e.g., 1234567.89)\nAdding Debits:\n\nGIVEN I am on the Debits Page\nWHEN I enter a new Debit's description and amount\nAND WHEN I click on 'Add Debit' button\nTHEN I shall see my new Debit description and amount added to the Debits display area with the current date (yyyy-mm-dd)\nAND I shall see my Account Balance updated to reflect the addition of new Debit\nAND all amounts are rounded to 2 decimal places (e.g., 1234567.89)\nViewing the Account Balance on the Debits Page:\n\nGIVEN I am on the Debits Page\nWHEN I view the Account Balance display area\nTHEN I shall see my Account Balance displayed\nAND all amounts are rounded to 2 decimal places (e.g., 1234567.89)\n*/\n\nclass Debits extends Component {\n    constructor(props) {\n        super(props);\n\n        // Initialize the state\n        this.state = {\n            debits: this.props.debits,\n            sortBy: this.props.debitsSortBy\n        }\n    }\n\n    /**\n     * Handle the form submission.\n     * \n     * @param {Event} e \n     * @returns {void}\n     */\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        // Get the form data.\n        let description = e.target.description.value;\n        let amount = e.target.amount.value;\n        let date = new Date().toISOString();\n\n        // Trim the description and parse the amount as a float\n        description = description.trim();\n        amount = parseFloat(amount);\n\n        // Validation checks.\n        if (isNaN(amount)) {\n            alert(\"Please enter a valid amount.\");\n            return;\n        }\n\n        if (amount <= 0) {\n            if (amount === 0) {\n                alert(\"Please enter a non-zero amount.\");\n            } else {\n                alert(\"Please enter a positive number. A negative debit is a credit ;)\");\n            }\n            return;\n        }\n\n        if (description === \"\") {\n            alert(\"Please enter a description.\");\n            return;\n        }\n\n        // Use helper functions.\n        this.props.addDebit(amount, description, date);\n        this.props.updateAccountBalance();\n        this.props.sortDebits();\n\n        // Reset the form values.\n        e.target.description.value = \"\";\n        e.target.amount.value = \"\";\n    }\n\n    handleSorting = (e) => {\n        e.preventDefault();\n        let sortBy = e.target.value;\n        this.props.sortDebits(sortBy);\n    }\n\n    // Create the list of Debit items\n    debitsView = () => {\n        const debits = this.state.debits;\n        return debits.map((debit) => {\n            let date = new Date(debit.date).toISOString().slice(0, 10);\n            return (\n                <li key={debit.id}>\n                    <dl>\n                        <dt className=\"eyebrow\">Description</dt>\n                        <dd>{debit.description}</dd>\n                        <dt className=\"eyebrow\">Amount</dt>\n                        <dd>${debit.amount.toLocaleString(undefined, {maximumFractionDigits: 2})}</dd>\n                        <dt className=\"eyebrow\">Date</dt>\n                        <dd>{date}</dd>\n                    </dl>\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container\">\n                    <h1 className=\"heading-2 page-title\">Debits</h1>\n\n                    <AccountBalance\n                        accountBalance={this.props.accountBalance}\n                        debitsAmount={this.props.debitsAmount}\n                        creditsAmount={this.props.creditsAmount}\n                    />\n\n                    <div className=\"modules grid\">\n                        <section className=\"add-item module\">\n                            <h2 className=\"heading-4\">Add Debit</h2>\n                            <form onSubmit={this.handleSubmit} className=\"grid\">\n                                <div className=\"form-input-wrapper\">\n                                    <label htmlFor=\"description\">Description</label>\n                                    <input type=\"text\" name=\"description\" />\n                                </div>\n                                <div className=\"form-input-wrapper\">\n                                    <label htmlFor=\"amount\">Amount</label>\n                                    <input type=\"number\" name=\"amount\" min=\"1\" step=\"0.01\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn primary\">Add Debit</button>\n                            </form>\n                        </section>\n                        \n                        <section className=\"view-items module grid\">\n                            <h2 className=\"heading-4\">View Debits</h2>\n                            <form className=\"sorting flex-container\">\n                                <label htmlFor=\"sort\">Sort by</label>\n                                <select name=\"sort\" id=\"sort\" onChange={this.handleSorting} defaultValue={this.state.sortBy}>\n                                    <option value=\"date-desc\">Date (Oldest to Newest)</option>\n                                    <option value=\"date-asc\">Date (Newest to Oldest)</option>\n                                    <option value=\"amount-asc\">Amount (Lowest to Highest)</option>\n                                    <option value=\"amount-desc\">Amount (Highest to Lowest)</option>\n                                    <option value=\"ID\">ID</option>\n                                </select>\n                            </form>\n                            <ul>\n                                {this.debitsView()}\n                            </ul>\n                        </section>\n                    </div>\n\n                    <Link to=\"/\" className=\"btn secondary\">Return to Home</Link>  \n                </div>\n            </div>            \n        )\n    }\n}\n\nexport default Debits;","/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\n\nclass App extends Component {\n\tconstructor() {  // Create and initialize state\n\t\tsuper();\n\t\tthis.state = {\n\t\t\taccountBalance: 0,\n\t\t\tcredits: [],\n\t\t\tcreditsSortBy: 'amount-asc',\n\t\t\tdebits: [],\n\t\t\tdebitsSortBy: 'amount-asc',\n\t\t\tcurrentUser: {\n\t\t\t\tuserName: 'Joe Smith',\n\t\t\t\tmemberSince: '11/22/23',\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n     * Call API endpoint to get data.\n     */\n\tasync componentDidMount() {\n\t\t\n\t\t/*\n\t\t * Get credits data from API endpoint.\n\t\t */\n\t\ttry {\n\t\t\tlet response = await axios.get('https://johnnylaicode.github.io/api/credits.json');\n\t\t\tresponse.data.forEach((credit) => {\n\t\t\t\tif (typeof credit.amount == 'undefined' || typeof credit.description == 'undefined' || typeof credit.date == 'undefined') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.addCredit(credit.amount, credit.description, credit.date, credit.id);\n\t\t\t})\n\t\t\tthis.updateAccountBalance();\n\t\t\tthis.sortCredits();\n\t\t} \n\t\tcatch (error) {\n\t\t\tif (error.response) {\n\t\t\t\t// The request was made, and the server responded with error message and status code.\n\t\t\t\tconsole.log(error.response.data); \n\t\t\t\tconsole.log(error.response.status);\n            }    \n        }\n\n\t\t/*\n\t\t * Get debits data from API endpoint.\n\t\t */\n        try {\n            let response = await axios.get('https://johnnylaicode.github.io/api/debits.json');\n            response.data.forEach((debit) => {\n                if (typeof debit.amount == 'undefined' || typeof debit.description == 'undefined' || typeof debit.date == 'undefined') {\n                    return;\n                }\n\n                this.addDebit(debit.amount, debit.description, debit.date, debit.id);\n            })\n            this.updateAccountBalance();\n            this.sortDebits();\n        } \n        catch (error) {\n            if (error.response) {\n                // The request was made, and the server responded with error message and status code.\n                console.log(error.response.data); \n                console.log(error.response.status);\n            }    \n        }\n    }  \n\n\t/**\n\t * Mock Log In.\n\t * \n\t * Update state's currentUser (userName) after \"Log In\" button is clicked.\n\t * \n\t * @param {*} logInInfo \n\t */\n\tmockLogIn = (logInInfo) => {\n\t\tconst newUser = { ...this.state.currentUser };\n\t\tnewUser.userName = logInInfo.userName;\n\t\tthis.setState({ currentUser: newUser })\n\t}\n\n\t/**\n\t * Update state's accountBalance.\n\t * \n\t * Calculate the account balance by subtracting the total debits amount from the total credits amount.\n\t * Then, round the account balance to 2 decimal places.\n\t * \n\t * @returns {Number} The account balance.\n\t */\n\tupdateAccountBalance = () => {\n\t\tlet accountBalance = 0;\n\t\tlet creditsAmount = this.getCreditsAmount();\n\t\tlet debitsAmount = this.getDebitsAmount();\n\t\taccountBalance = creditsAmount - debitsAmount;\n\n\t\t// Round 2 decimal places\n\t\taccountBalance = Math.round(accountBalance * 100) / 100;\n\n\t\t// Update state's accountBalance\n\t\tthis.setState({ accountBalance: accountBalance });\n\t\t\n\t\treturn accountBalance;\n\t}\n\n\t/**\n\t * Add a credit.\n\t * \n\t * @param {Number} amount The credit amount.\n\t * @param {String} description The credit description.\n\t * @param {Date|String} date The credit date.\n\t * @param {Number} id Optional. The credit id. Default is 0 (auto-increment).\n\t * @returns {False|Number} The credit id. False if the credit id already exists.\n\t */\n\taddCredit = (amount, description, date, id = 0) => {\n\t\tif (id === 0) {\n\t\t\tid = this.state.credits.length + 1;\n\t\t}\n\n\t\t// Prevent duplicate id.\n\t\tif (typeof this.getCredit(parseInt(id)) !== 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet credit = {\n\t\t\tid: id,\n\t\t\tamount: amount,\n\t\t\tdescription: description,\n\t\t\tdate: date\n\t\t};\n\t\tlet credits = this.state.credits;\n\t\tcredits.push(credit);\n\t\tthis.setState({ credits: credits });\n\t\treturn id;\n\t}\n\n\t/**\n\t * Get a credit.\n\t * \n\t * @param {Number} id The credit's id.\n\t * @returns The credit object.\n\t */\n\tgetCredit = (id) => {\n\t\tlet credit = this.state.credits.find((credit) => {\n\t\t\treturn credit.id === id;\n\t\t});\n\t\treturn credit;\n\t}\n\n\n\t/**\n\t * Get the total credits amount.\n\t * \n\t * @returns {Number} The total credits amount.\n\t */\n\tgetCreditsAmount = () => {\n\t\tlet creditsAmount = 0;\n\t\tif (this.state.credits.length === 0) {\n\t\t\treturn creditsAmount;\n\t\t}\n\t\tthis.state.credits.forEach((credit) => {\n\t\t\tcreditsAmount += credit.amount;\n\t\t});\n\t\tcreditsAmount = Math.round(creditsAmount * 100) / 100;\n\t\treturn creditsAmount;\n\t}\n\n\t/**\n\t * Sort the credits.\n\t * \n\t * Sort options are 'date-asc', 'date-desc', 'amount-asc', 'amount-desc'.\n\t * \n\t * @param {String} sortBy Optional. The sort by option. Default is false (use the current state's sortBy).\n\t */\n\tsortCredits = (sortBy = false) => {\n\t\t// Default sort by to the current state's debitsSortBy.\n\t\tif (sortBy === false) {\n\t\t\tsortBy = this.state.creditsSortBy;\n\t\t}\n\n\t\tlet credits = this.state.credits;\n\t\tswitch (sortBy) {\n            case 'date-asc':\n                credits.sort((a, b) => {\n                    return new Date(b.date) - new Date(a.date);\n                });\n                break;\n            case 'date-desc':\n                credits.sort((a, b) => {\n\t\t\t\t\treturn new Date(a.date) - new Date(b.date);\n                });\n                break;\n            case 'amount-asc':\n                credits.sort((a, b) => {\n                    return a.amount - b.amount;\n                });\n                break;\n            case 'amount-desc':\n                credits.sort((a, b) => {\n                    return b.amount - a.amount;\n                });\n                break;\n\t\t\tcase 'ID':\n\t\t\t\tcredits.sort((a, b) => {\n\t\t\t\t\treturn a.id - b.id;\n\t\t\t\t});\n\t\t\t\tbreak;\n            default:\n                break;\n        }\n\n\t\tthis.setState({ credits: credits, creditsSortBy: sortBy });\n\t}\n\n\t/**\n\t * Add a debit.\n\t * \n\t * @param {Number} amount The debit amount.\n\t * @param {String} description The debit description.\n\t * @param {Date|String} date The debit date.\n\t * @param {Number} id Optional. The debit id. Default is 0 (auto-increment).\n\t * @returns {False|Number} The debit id. False if the debit id already exists.\n\t */\n\taddDebit = (amount, description, date, id = 0) => {\n\t\tif (id === 0) {\n\t\t\tid = this.state.debits.length + 1;\n\t\t}\n\n\t\t// Prevent duplicate id.\n\t\tif (typeof this.getDebit(parseInt(id)) !== 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet debit = {\n\t\t\tid: id,\n\t\t\tamount: amount,\n\t\t\tdescription: description,\n\t\t\tdate: date\n\t\t};\n\t\tlet debits = this.state.debits;\n\t\tdebits.push(debit);\n\t\tthis.setState({ debits: debits });\n\t\treturn id;\n\t}\n\n\t/**\n\t * Get a debit.\n\t * \n\t * @param {Number} id The debit's id.\n\t * @returns The debit object.\n\t */\n\tgetDebit = (id) => {\n\t\tlet debit = this.state.debits.find((debit) => {\n\t\t\treturn debit.id === id;\n\t\t});\n\t\treturn debit;\n\t}\n\n\t/**\n\t * Get the total debits amount.\n\t * \n\t * @returns {Number} The total debits amount.\n\t */\n\tgetDebitsAmount = () => {\n\t\tlet debitsAmount = 0;\n\t\tif (this.state.debits.length === 0) {\n\t\t\treturn debitsAmount;\n\t\t}\n\t\tthis.state.debits.forEach((debit) => {\n\t\t\tdebitsAmount += debit.amount;\n\t\t});\n\t\tdebitsAmount = Math.round(debitsAmount * 100) / 100;\n\t\treturn debitsAmount;\n\t}\n\n\t/**\n\t * Sort the debits.\n\t * \n\t * Sort options are 'date-asc', 'date-desc', 'amount-asc', 'amount-desc'.\n\t * \n\t * @param {String} sortBy Optional. The sort by option. Default is false (use the current state's sortBy).\n\t */\n\tsortDebits = (sortBy = false) => {\n\t\t// Default sort by to the current state's debitsSortBy.\n\t\tif (sortBy === false) {\n\t\t\tsortBy = this.state.debitsSortBy;\n\t\t}\n\n\t\tlet debits = this.state.debits;\n\t\tswitch (sortBy) {\n            case 'date-asc':\n                debits.sort((a, b) => {\n                    return new Date(b.date) - new Date(a.date);\n                });\n                break;\n            case 'date-desc':\n                debits.sort((a, b) => {\n\t\t\t\t\treturn new Date(a.date) - new Date(b.date);\n                });\n                break;\n            case 'amount-asc':\n                debits.sort((a, b) => {\n                    return a.amount - b.amount;\n                });\n                break;\n            case 'amount-desc':\n                debits.sort((a, b) => {\n                    return b.amount - a.amount;\n                });\n                break;\n\t\t\tcase 'ID':\n\t\t\t\tdebits.sort((a, b) => {\n\t\t\t\t\treturn a.id - b.id;\n\t\t\t\t});\n\t\t\t\tbreak;\n            default:\n                break;\n        }\n\n\t\tthis.setState({ debits: debits, debitsSortBy: sortBy });\n\t}\n\n\t/**\n\t * Create Routes and React elements to be rendered using React components.\n\t */\n\trender() {\n\t\t// Create React elements and pass input props to components.\n\t\tconst HomeComponent = () => (\n\t\t\t<Home\n\t\t\t\taccountBalance={this.state.accountBalance} \n\t\t\t\tdebitsAmount={this.getDebitsAmount}\n\t\t\t\tcreditsAmount={this.getCreditsAmount}\n\t\t\t/>\n\t\t)\n\t\tconst UserProfileComponent = () => (\n\t\t\t<UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\n\t\t)\n\t\tconst LogInComponent = () => (\n\t\t\t<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />\n\t\t)\n\t\tconst CreditsComponent = () => (\n\t\t\t<Credits\n\t\t\t\tcredits={this.state.credits}\n\t\t\t\tcreditsSortBy={this.state.creditsSortBy}\n\t\t\t\taddCredit={this.addCredit}\n\t\t\t\tsortCredits={this.sortCredits}\n\t\t\t\taccountBalance={this.state.accountBalance}\n\t\t\t\tupdateAccountBalance={this.updateAccountBalance}\n\t\t\t\tdebitsAmount={this.getDebitsAmount}\n\t\t\t\tcreditsAmount={this.getCreditsAmount}\n\t\t\t/>\n\t\t)\n\t\tconst DebitsComponent = () => (\n\t\t\t<Debits\n\t\t\t\tdebits={this.state.debits}\n\t\t\t\tdebitsSortBy={this.state.debitsSortBy}\n\t\t\t\taddDebit={this.addDebit}\n\t\t\t\tsortDebits={this.sortDebits}\n\t\t\t\taccountBalance={this.state.accountBalance}\n\t\t\t\tupdateAccountBalance={this.updateAccountBalance}\n\t\t\t\tdebitsAmount={this.getDebitsAmount}\n\t\t\t\tcreditsAmount={this.getCreditsAmount}\n\t\t\t/>\n\t\t)\n\n\t\t// Return all routes.\n\t\treturn (\n\t\t\t<Router basename=\"/assignment4-bank-of-react\">\n\t\t\t\t<div>\n\t\t\t\t\t<Route exact path=\"/\" render={HomeComponent} />\n\t\t\t\t\t<Route exact path=\"/userProfile\" render={UserProfileComponent} />\n\t\t\t\t\t<Route exact path=\"/login\" render={LogInComponent} />\n\t\t\t\t\t<Route exact path=\"/credits\" render={CreditsComponent} />\n\t\t\t\t\t<Route exact path=\"/debits\" render={DebitsComponent} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","/*==================================================\nsrc/index.js\n\nThis file renders the top-level component App which contains all components of the app).\n==================================================*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n// Note: In above, StrictMode is a tool for highlighting potential problems in an application.\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}